{"version":3,"file":"e9b96f9ee3dec9b2864e.worker.js","mappings":"yBACA,IAAIA,EAAsB,CCA1BA,EAAwB,SAASC,EAASC,GACzC,IAAI,IAAIC,KAAOD,EACXF,EAAoBI,EAAEF,EAAYC,KAASH,EAAoBI,EAAEH,EAASE,IAC5EE,OAAOC,eAAeL,EAASE,EAAK,CAAEI,YAAY,EAAMC,IAAKN,EAAWC,IAG3E,ECPAH,EAAwB,SAASS,EAAKC,GAAQ,OAAOL,OAAOM,UAAUC,eAAeC,KAAKJ,EAAKC,EAAO,G,KCAvF,SAASI,EAAkBC,EAAKC,IAClC,MAAPA,GAAeA,EAAMD,EAAIE,UAAQD,EAAMD,EAAIE,QAC/C,IAAK,IAAIC,EAAI,EAAGC,EAAO,IAAIC,MAAMJ,GAAME,EAAIF,EAAKE,IAAKC,EAAKD,GAAKH,EAAIG,GACnE,OAAOC,CACT,CCAe,SAASE,EAAmBN,GACzC,OCJa,SAA4BA,GACzC,GAAIK,MAAME,QAAQP,GAAM,OAAO,EAAiBA,EAClD,CDES,CAAkBA,IELZ,SAA0BQ,GACvC,GAAsB,qBAAXC,QAAmD,MAAzBD,EAAKC,OAAOC,WAA2C,MAAtBF,EAAK,cAAuB,OAAOH,MAAMM,KAAKH,EACtH,CFGmC,CAAgBR,IGJpC,SAAqCX,EAAGuB,GACrD,GAAKvB,EAAL,CACA,GAAiB,kBAANA,EAAgB,OAAO,EAAiBA,EAAGuB,GACtD,IAAIC,EAAIvB,OAAOM,UAAUkB,SAAShB,KAAKT,GAAG0B,MAAM,GAAI,GAEpD,MADU,WAANF,GAAkBxB,EAAE2B,cAAaH,EAAIxB,EAAE2B,YAAYC,MAC7C,QAANJ,GAAqB,QAANA,EAAoBR,MAAMM,KAAKtB,GACxC,cAANwB,GAAqB,2CAA2CK,KAAKL,GAAW,EAAiBxB,EAAGuB,QAAxG,CALc,CAMhB,CHH2D,CAA2BZ,IILvE,WACb,MAAM,IAAImB,UAAU,uIACtB,CJG8F,EAC9F,CKNA,SAASC,EAAqBC,EAAWC,GAGrC,IAFA,IAAIC,EAAQC,EAAwBH,GAChCI,EAAQ,EACHtB,EAAI,EAAGA,EAAIoB,EAAMrB,OAAQC,IAC1BoB,EAAMpB,KAAOmB,GACbG,IAGR,OAAOA,CACX,CAEA,SAASD,EAAwBE,GAW7B,OATuBA,EAAYC,QAAQ,UAAW,KAAKA,QAAQ,OAAQ,KAG1CC,MAAM,KAAKC,KAAI,SAAAP,GAAI,OAAIA,EAAKK,QAAQ,WAAY,GAAG,IAG/EG,QAAO,SAAAR,GAAI,OAAIA,EAAKS,OAAO7B,OAAS,CAAC,IAErC2B,KAAI,SAAAP,GAAI,OAAIA,EAAKU,aAAa,GAEvC,CAiFO,SAASC,EAAmBC,GAC/B,GAAoB,oBAAhBA,EAAEC,KAAKC,KAA4B,CACnCC,YAAY,CAAED,KAAM,WAAYE,SAAU,IAC1C,IAAMC,EAlFd,SAA6Bb,GACzB,IAAMH,EAAQC,EAAwBE,GAChCa,EAAS,GACTC,EAAWlC,EAAO,IAAImC,IAAIlB,IAG1BmB,EAAkBF,EAAYtC,QAAUsC,EAAYtC,OAAS,GACnEyC,QAAQC,KAAK,kBACbD,QAAQE,IAAI,6BAA8BH,GAG1C,IAFA,IAAII,EAAmB,EAAEC,EAAA,SAAA5C,GAIrB,IAF0C,IAAD6C,EAAA,SAAAC,GAIrC,GAAI9C,IAAM8C,MAENH,EAGuB,MAAW,GAE9BT,YAAY,CAAED,KAAM,WAAYE,SAHlBQ,EAAmBJ,EAAmB,MAOpDF,EAAYrC,KAAOqC,EAAYS,IAAI,CAEnC,IAAMC,EAAc5C,EAAO,IAAImC,IAAID,EAAYrC,GAAGyB,MAAM,MAClDuB,EAAc7C,EAAO,IAAImC,IAAID,EAAYS,GAAGrB,MAAM,MAGxD,GAAIsB,EAAeE,OAAM,SAAAC,GAAM,OAAIF,EAAeG,SAASD,EAAO,KAAKF,EAAeC,OAAM,SAAAC,GAAM,OAAIH,EAAeI,SAASD,EAAO,MAE5Hd,EAAOgB,MAAK,SAAAC,GAAI,OAAIA,EAAKF,SAASd,EAAYrC,KAAOqD,EAAKF,SAASd,EAAYS,GAAG,IACnF,GAAsB,IAAlBV,EAAOrC,OACPqC,EAAOkB,KAAK,CAACjB,EAAYrC,GAAIqC,EAAYS,SACtC,CAEH,IADA,IAAIS,GAAQ,EACHC,EAAI,EAAGA,EAAIpB,EAAOrC,OAAQyD,IAC/B,GAAIpB,EAAOoB,GAAGL,SAASd,EAAYrC,KAAOoC,EAAOoB,GAAGL,SAASd,EAAYS,IAAK,CACpEV,EAAOoB,GAAGL,SAASd,EAAYrC,KACjCoC,EAAOoB,GAAGF,KAAKjB,EAAYrC,IAEzBoC,EAAOoB,GAAGL,SAASd,EAAYS,KACjCV,EAAOoB,GAAGF,KAAKjB,EAAYS,IAE/BS,GAAQ,EACR,KACJ,CAECA,GACDnB,EAAOkB,KAAK,CAACjB,EAAYrC,GAAIqC,EAAYS,IAEjD,CAGZ,CAER,EA9CSA,EAAI,EAAGA,EAAIT,EAAYtC,OAAQ+C,IAAGD,EAAAC,EA+C/C,EAjDS9C,EAAI,EAAGA,EAAIqC,EAAYtC,OAAQC,IAAG4C,EAAA5C,GAkD3CwC,QAAQiB,QAAQ,kBAChBjB,QAAQC,KAAK,gBAGb,IAFA,IAAMiB,EAAmB,GAEzBC,EAAA,EAAAC,EAAoBxB,EAAMuB,EAAAC,EAAA7D,OAAA4D,IAAE,CAAvB,IACKE,EADMD,EAAAD,GACkBjC,KAAI,SAAAP,GAC9B,MAAO,CAAEA,KAAMA,EAAMG,MAAOL,EAAqBM,EAAaJ,GAClE,IACAuC,EAAiBJ,KAAKO,EAC1B,CAMA,OAHAH,EAAiBI,MAAK,SAACC,EAAGC,GAAC,OAAKA,EAAEjE,OAASgE,EAAEhE,MAAM,IACnDyC,QAAQiB,QAAQ,gBAETC,CACX,CAKuBO,CAAoBlC,EAAEC,KAAKkC,OAC1ChC,YAAY,CAAED,KAAM,SAAUG,OAAAA,GAClC,CACJ,C,iDAGA+B,KAAKC,UAAYtC,E","sources":["../webpack/bootstrap","../webpack/runtime/define property getters","../webpack/runtime/hasOwnProperty shorthand","../node_modules/@babel/runtime/helpers/esm/arrayLikeToArray.js","../node_modules/@babel/runtime/helpers/esm/toConsumableArray.js","../node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js","../node_modules/@babel/runtime/helpers/esm/iterableToArray.js","../node_modules/@babel/runtime/helpers/esm/unsupportedIterableToArray.js","../node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js","functions/anagramWorker.js"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = function(exports, definition) {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }","export default function _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];\n  return arr2;\n}","import arrayWithoutHoles from \"./arrayWithoutHoles.js\";\nimport iterableToArray from \"./iterableToArray.js\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray.js\";\nimport nonIterableSpread from \"./nonIterableSpread.js\";\nexport default function _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();\n}","import arrayLikeToArray from \"./arrayLikeToArray.js\";\nexport default function _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return arrayLikeToArray(arr);\n}","export default function _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}","import arrayLikeToArray from \"./arrayLikeToArray.js\";\nexport default function _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return arrayLikeToArray(o, minLen);\n}","export default function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","function countWordOccurrences(textInput, word) {\r\n    var words = getCleanWordsFromString(textInput);\r\n    let count = 0;\r\n    for (let i = 0; i < words.length; i++) {\r\n        if (words[i] === word) {\r\n            count++;\r\n        }\r\n    }\r\n    return count;\r\n}\r\n\r\nfunction getCleanWordsFromString(inputString) {\r\n    // Replace all new line and tab characters with a space character, and remove consecutive spaces\r\n    const textWithSpaces = inputString.replace(/[\\n\\t]/g, ' ').replace(/\\s+/g, ' ');\r\n\r\n    // Split the text into an array of words\r\n    const origWords = textWithSpaces.split(' ').map(word => word.replace(/[^\\w\\s]/g, ''));\r\n    const words = origWords\r\n        // Remove empty strings from the array\r\n        .filter(word => word.trim().length > 0)\r\n        // Convert all words to lower case\r\n        .map(word => word.toLowerCase());\r\n    return words;\r\n}\r\n\r\nfunction findPartialAnagrams(inputString) {\r\n    const words = getCleanWordsFromString(inputString);\r\n    const result = [];\r\n    const uniqueWords = [...new Set(words)];\r\n\r\n    // Calculate the total number of iterations (for progress calculation)\r\n    const totalIterations = uniqueWords.length * (uniqueWords.length - 1);\r\n    console.time(\"Analyzing Time\");\r\n    console.log(\"Expected total iterations:\", totalIterations);\r\n    let currentIteration = 0;\r\n\r\n    for (let i = 0; i < uniqueWords.length; i++) {\r\n        // For each word, compare it to the other words in the array\r\n        for (let j = 0; j < uniqueWords.length; j++) {\r\n            // Skip the current word if it is being compared to itself\r\n            if (i !== j) {\r\n                // Increment current iteration and calculate progress\r\n                currentIteration++;\r\n                \r\n                const progress = (currentIteration / totalIterations) * 100;\r\n                if (currentIteration % 100000 === 0) {\r\n                    //console.log(progress)\r\n                    postMessage({ type: 'progress', progress });\r\n                }\r\n\r\n                // Check if the words are equal\r\n                if (uniqueWords[i] !== uniqueWords[j]) {\r\n                    // If they are not equal, check if they are partial anagrams\r\n                    const uniqueLetters1 = [...new Set(uniqueWords[i].split(''))];\r\n                    const uniqueLetters2 = [...new Set(uniqueWords[j].split(''))];\r\n\r\n                    // Check if each unique letter in one word appears in the other word\r\n                    if (uniqueLetters1.every(letter => uniqueLetters2.includes(letter)) && uniqueLetters2.every(letter => uniqueLetters1.includes(letter))) {\r\n                        // Check if the pair has already been added to the result array\r\n                        if (!result.some(pair => pair.includes(uniqueWords[i]) && pair.includes(uniqueWords[j]))) {\r\n                            if (result.length === 0) {\r\n                                result.push([uniqueWords[i], uniqueWords[j]]);\r\n                            } else {\r\n                                let found = false;\r\n                                for (let k = 0; k < result.length; k++) {\r\n                                    if (result[k].includes(uniqueWords[i]) || result[k].includes(uniqueWords[j])) {\r\n                                        if (!(result[k].includes(uniqueWords[i]))) {\r\n                                            result[k].push(uniqueWords[i]);\r\n                                        }\r\n                                        if (!(result[k].includes(uniqueWords[j]))) {\r\n                                            result[k].push(uniqueWords[j]);\r\n                                        }\r\n                                        found = true;\r\n                                        break;\r\n                                    }\r\n                                }\r\n                                if (!found) {\r\n                                    result.push([uniqueWords[i], uniqueWords[j]]);\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n    console.timeEnd(\"Analyzing Time\");\r\n    console.time(\"Sorting Time\"); // Start the timer with label \"Sorting Time\"\r\n    const resultWithCounts = [];\r\n\r\n    for (const group of result) {\r\n        const groupWithCounts = group.map(word => {\r\n            return { word: word, count: countWordOccurrences(inputString, word) };\r\n        });\r\n        resultWithCounts.push(groupWithCounts);\r\n    }\r\n\r\n    // Sort the result array by the largest list of partial anagrams first\r\n    resultWithCounts.sort((a, b) => b.length - a.length);\r\n    console.timeEnd(\"Sorting Time\"); // End the timer with label \"Sorting Time\"\r\n\r\n    return resultWithCounts;\r\n}\r\n\r\nexport function mainWorkerFunction(e) {\r\n    if (e.data.type === 'computeAnagrams') {\r\n        postMessage({ type: 'progress', progress: 0 });  // Initial progress message\r\n        const result = findPartialAnagrams(e.data.input);\r\n        postMessage({ type: 'result', result });  // Final result\r\n    }\r\n}\r\n\r\n// eslint-disable-next-line no-restricted-globals\r\nself.onmessage = mainWorkerFunction;"],"names":["__webpack_require__","exports","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","_arrayLikeToArray","arr","len","length","i","arr2","Array","_toConsumableArray","isArray","iter","Symbol","iterator","from","minLen","n","toString","slice","constructor","name","test","TypeError","countWordOccurrences","textInput","word","words","getCleanWordsFromString","count","inputString","replace","split","map","filter","trim","toLowerCase","mainWorkerFunction","e","data","type","postMessage","progress","result","uniqueWords","Set","totalIterations","console","time","log","currentIteration","_loop","_loop2","j","uniqueLetters1","uniqueLetters2","every","letter","includes","some","pair","push","found","k","timeEnd","resultWithCounts","_i","_result","groupWithCounts","sort","a","b","findPartialAnagrams","input","self","onmessage"],"sourceRoot":""}