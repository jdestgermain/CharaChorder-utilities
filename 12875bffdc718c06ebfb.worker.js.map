{"version":3,"file":"12875bffdc718c06ebfb.worker.js","mappings":"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","sources":["../node_modules/@babel/runtime/helpers/esm/arrayLikeToArray.js","../node_modules/@babel/runtime/helpers/esm/unsupportedIterableToArray.js","../node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js","../node_modules/@babel/runtime/helpers/esm/toConsumableArray.js","../node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js","../node_modules/@babel/runtime/helpers/esm/iterableToArray.js","../node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js","../node_modules/@babel/runtime/helpers/esm/slicedToArray.js","../node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js","../node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js","../node_modules/@babel/runtime/helpers/esm/nonIterableRest.js","functions/chordGenerationWorker.js"],"sourcesContent":["export default function _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];\n  return arr2;\n}","import arrayLikeToArray from \"./arrayLikeToArray.js\";\nexport default function _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return arrayLikeToArray(o, minLen);\n}","import unsupportedIterableToArray from \"./unsupportedIterableToArray.js\";\nexport default function _createForOfIteratorHelper(o, allowArrayLike) {\n  var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"];\n  if (!it) {\n    if (Array.isArray(o) || (it = unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n      if (it) o = it;\n      var i = 0;\n      var F = function F() {};\n      return {\n        s: F,\n        n: function n() {\n          if (i >= o.length) return {\n            done: true\n          };\n          return {\n            done: false,\n            value: o[i++]\n          };\n        },\n        e: function e(_e) {\n          throw _e;\n        },\n        f: F\n      };\n    }\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n  var normalCompletion = true,\n    didErr = false,\n    err;\n  return {\n    s: function s() {\n      it = it.call(o);\n    },\n    n: function n() {\n      var step = it.next();\n      normalCompletion = step.done;\n      return step;\n    },\n    e: function e(_e2) {\n      didErr = true;\n      err = _e2;\n    },\n    f: function f() {\n      try {\n        if (!normalCompletion && it[\"return\"] != null) it[\"return\"]();\n      } finally {\n        if (didErr) throw err;\n      }\n    }\n  };\n}","import arrayWithoutHoles from \"./arrayWithoutHoles.js\";\nimport iterableToArray from \"./iterableToArray.js\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray.js\";\nimport nonIterableSpread from \"./nonIterableSpread.js\";\nexport default function _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();\n}","import arrayLikeToArray from \"./arrayLikeToArray.js\";\nexport default function _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return arrayLikeToArray(arr);\n}","export default function _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}","export default function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","import arrayWithHoles from \"./arrayWithHoles.js\";\nimport iterableToArrayLimit from \"./iterableToArrayLimit.js\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray.js\";\nimport nonIterableRest from \"./nonIterableRest.js\";\nexport default function _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || unsupportedIterableToArray(arr, i) || nonIterableRest();\n}","export default function _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}","export default function _iterableToArrayLimit(r, l) {\n  var t = null == r ? null : \"undefined\" != typeof Symbol && r[Symbol.iterator] || r[\"@@iterator\"];\n  if (null != t) {\n    var e,\n      n,\n      i,\n      u,\n      a = [],\n      f = !0,\n      o = !1;\n    try {\n      if (i = (t = t.call(r)).next, 0 === l) {\n        if (Object(t) !== t) return;\n        f = !1;\n      } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0);\n    } catch (r) {\n      o = !0, n = r;\n    } finally {\n      try {\n        if (!f && null != t[\"return\"] && (u = t[\"return\"](), Object(u) !== u)) return;\n      } finally {\n        if (o) throw n;\n      }\n    }\n    return a;\n  }\n}","export default function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","function generateChords(words, sliderValue, checkboxStates, chordLibrary) {\r\n    const MIN_WORD_LENGTH = 2;\r\n    const ALT_KEYS = ['LEFT_ALT', 'RIGHT_ALT'];\r\n    const KEY_MIRROR_MAP_L = {\r\n        \",\": \";\",\r\n        \"u\": \"s\",\r\n        \"'\": \"y\",\r\n        \".\": \"j\",\r\n        \"o\": \"n\",\r\n        \"i\": \"l\",\r\n        \"e\": \"t\",\r\n        \"SPACE\": \"SPACE\",\r\n        \"BKSP\": \"ENTER\",\r\n        \"r\": \"a\",\r\n        \"v\": \"p\",\r\n        \"m\": \"h\",\r\n        \"c\": \"d\",\r\n        \"k\": \"f\",\r\n        \"z\": \"q\",\r\n        \"w\": \"b\",\r\n        \"g\": null,\r\n        \"x\": null\r\n    };\r\n    const KEY_MIRROR_MAP_R = Object.fromEntries(Object.entries(KEY_MIRROR_MAP_L).map(([key, value]) => [value, key]));\r\n    const KEY_FINGER_MAP = {\r\n        \"LH_PINKY\": ['LEFT_ALT'],\r\n        \"LH_RING_1\": [',', 'u', \"'\"],\r\n        \"LH_MID_1\": ['.', 'o', 'i'],\r\n        \"LH_INDEX\": ['e', 'r', 'SPACE', 'BKSP'],\r\n        \"LH_THUMB_1\": ['m', 'v', 'k', 'c'],\r\n        \"LH_THUMB_2\": ['g', 'z', 'w'],\r\n        \"RH_THUMB_2\": ['x', 'b', 'q', 'DUP'],\r\n        \"RH_THUMB_1\": ['p', 'f', 'd', 'h'],\r\n        \"RH_INDEX\": ['a', 't', 'SPACE', 'ENTER'],\r\n        \"RH_MID_1\": ['l', 'n', 'j'],\r\n        \"RH_RING_1\": ['y', 's', ';'],\r\n        \"RH_PINKY\": ['RIGHT_ALT']\r\n    };\r\n    const CONFLICTING_FINGER_GROUPS_DOUBLE = {\r\n        \"LH_PINKY\": ['LEFT_ALT', 'LH_PINKY_3D'],\r\n        \"LH_RING_1\": [',', 'u', \"'\", 'LH_RING_1_3D'],\r\n        \"LH_MID_1\": ['.', 'o', 'i', 'LH_MID_1_3D'],\r\n        \"LH_INDEX\": ['e', 'r', 'LH_INDEX_3D', 'SPACE', 'BKSP'],\r\n        \"LH_THUMB\": ['m', 'v', 'k', 'c', 'LH_THUMB_1_3D', 'g', 'z', 'w', 'LH_THUMB_1_3D'],\r\n        \"RH_THUMB\": ['x', 'b', 'q', 'DUP', 'RH_THUMB_1_3D', 'p', 'f', 'd', 'h', 'RH_THUMB_2_3D'],\r\n        \"RH_INDEX\": ['a', 't', 'RH_INDEX_3D', 'SPACE', 'ENTER'],\r\n        \"RH_MID_1\": ['l', 'n', 'j', 'RH_MID_1_3D'],\r\n        \"RH_RING_1\": ['y', 's', ';', 'RH_RING_1_3D'],\r\n        \"RH_PINKY\": ['RIGHT_ALT', 'RH_PINKY_3D']\r\n    };\r\n    const CONFLICTING_FINGER_GROUPS_TRIPLE = {\r\n        \"group_1\": ['a', 'n', 'y'],\r\n        \"group_2\": ['r', 'o', \"'\"]\r\n    }\r\n\r\n    const UNUSABLE_CHORDS = {\r\n        \"impulse_chord\": ['DUP', 'i']\r\n    };\r\n\r\n    const settings = {\r\n        useDupKey: checkboxStates.useDupKey,\r\n        useMirroredKeys: checkboxStates.useMirroredKeys,\r\n        useAltKeys: checkboxStates.useAltKeys,\r\n        use3dKeys: checkboxStates.use3dKeys,\r\n        sliderValue: sliderValue,\r\n        chordLibrary: chordLibrary\r\n    };\r\n\r\n    const onlyChars = true;\r\n    const useDupKey = settings.useDupKey;\r\n    const useMirroredKeys = settings.useMirroredKeys;\r\n    const useAltKeys = settings.useAltKeys;\r\n    const use3dKeys = settings.use3dKeys;\r\n    const minChordLength = settings.sliderValue[0];\r\n    const maxChordLength = settings.sliderValue[1];\r\n    let usedChords = {};\r\n    let uploadedChords = new Map();\r\n    let localWords = [...new Set(words.map(word => word.toLowerCase()))];\r\n\r\n    const CHORD_GENERATORS_MAP = {\r\n        'onlyCharsGenerator': onlyCharsGenerator,\r\n        'useMirroredKeysGenerator': useMirroredKeysGenerator,\r\n        'useAltKeysGenerator': useAltKeysGenerator,\r\n        'use3dKeysGenerator': use3dKeysGenerator\r\n    };\r\n\r\n    const SETTINGS_MAP = {\r\n        'onlyChars': onlyChars,\r\n        'useMirroredKeys': useMirroredKeys,\r\n        'useAltKeys': useAltKeys,\r\n        'use3dKeys': use3dKeys\r\n    };\r\n\r\n    function wordsList() {\r\n        return localWords.filter(word => word.length >= MIN_WORD_LENGTH);\r\n    }\r\n\r\n    function loadUploadedChords() {\r\n        return new Promise((resolve, reject) => {\r\n            try {\r\n                if (!chordLibrary || !Array.isArray(chordLibrary)) {\r\n                    console.warn('chordLibrary is not properly initialized.');\r\n                    resolve();\r\n                    return;\r\n                }\r\n\r\n                chordLibrary.forEach((entry) => {\r\n                    if (entry.chordInput && entry.chordOutput) {\r\n                        const chord = entry.chordInput.trim().split(' + ');\r\n                        const word = entry.chordOutput.trim();\r\n\r\n                        if (uploadedChords.has(word)) {\r\n                            uploadedChords.get(word).push(chord);\r\n                        } else {\r\n                            uploadedChords.set(word, [chord]);\r\n                        }\r\n                    }\r\n                });\r\n                resolve();\r\n            } catch (error) {\r\n                reject(error);\r\n            }\r\n        });\r\n    }\r\n\r\n    function calculateChord(chars) {\r\n        for (const generatorKey of Object.keys(CHORD_GENERATORS_MAP)) {\r\n            const option = generatorKey.replace('Generator', '');\r\n            if (SETTINGS_MAP[option]) {\r\n                const chord = CHORD_GENERATORS_MAP[generatorKey](chars); // function call here\r\n                if (chord) {\r\n                    const reversedChord = chord.slice().sort().reverse(); // Ensuring slice() so as not to mutate the original array\r\n                    return reversedChord;\r\n                }\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    function getChars(word) {\r\n        const chars = word.split(\"\").filter(str => str !== \" \");\r\n        let uniq_chars = [...new Set(chars)];\r\n        if (uniq_chars.length < chars.length && useDupKey) {\r\n            uniq_chars = [...new Set(chars), \"DUP\"]\r\n        }\r\n        const validChars = Object.values(KEY_FINGER_MAP).flat();\r\n\r\n        return uniq_chars.filter(char => validChars.includes(char));\r\n    }\r\n\r\n    function assignChord(word, chord) {\r\n        usedChords[word] = chord;\r\n    }\r\n\r\n    function onlyCharsGenerator(chars) {\r\n        for (const chord of allCombinations(chars)) {\r\n            if (validChord(chord)) return chord;\r\n        }\r\n    }\r\n\r\n    function useMirroredKeysGenerator(chars) {\r\n        for (const chord of allCombinations([...new Set([...chars, ...mirrorKeys(chars)])])) {\r\n            if (validChord(chord)) return chord;\r\n        }\r\n    }\r\n\r\n    function use3dKeysGenerator(chars) {\r\n        for (const chord of allCombinations([...new Set([...chars, ...threeDKeys(chars)])])) {\r\n            if (validChord(chord)) return chord;\r\n        }\r\n    }\r\n\r\n    function useAltKeysGenerator(chars) {\r\n        for (const chord of allCombinations([...new Set([...chars, ...ALT_KEYS])])) {\r\n            if (validChord(chord)) return chord;\r\n        }\r\n    }\r\n\r\n    function validChord(chord) {\r\n        return !fingerConflict(chord) && !usedChord(chord) && !uploadedChord(chord);\r\n    }\r\n\r\n    const powerSetCache = {};\r\n\r\n    function powerSet(chars) {\r\n        const cacheKey = chars.join(',');\r\n        if (powerSetCache[cacheKey]) return powerSetCache[cacheKey];\r\n\r\n        const result = [[]];\r\n        for (const value of chars) {\r\n            const length = result.length;\r\n            for (let i = 0; i < length; i++) {\r\n                const subset = result[i];\r\n                result.push(subset.concat(value));\r\n            }\r\n        }\r\n        powerSetCache[cacheKey] = result;\r\n        return result;\r\n    }\r\n\r\n    function allCombinations(chars) {\r\n        return powerSet(chars)\r\n            .filter(subset => subset.length >= minChordLength && subset.length <= maxChordLength)\r\n            .sort((a, b) => a.length - b.length);\r\n    }\r\n\r\n    function fingerConflict(chord) {\r\n        const sortedChord = [...chord].sort();\r\n        if (hasDuplicates(chord)) return true;\r\n        if (Object.values(CONFLICTING_FINGER_GROUPS_DOUBLE).some((fingerKeys) => fingerKeys.filter((key) => chord.includes(key)).length > 1)) return true;\r\n        if (Object.values(CONFLICTING_FINGER_GROUPS_TRIPLE).some((fingerKeys) => fingerKeys.filter((key) => chord.includes(key)).length > 2)) return true;\r\n        if (Object.values(UNUSABLE_CHORDS).some((fingerKeys) => JSON.stringify([...fingerKeys].sort()) === JSON.stringify(sortedChord))) return true;\r\n\r\n        return false;\r\n    }\r\n\r\n    function hasDuplicates(chord) {\r\n        return chord.length > new Set(chord).size;\r\n    }\r\n\r\n    function usedChord(chord) {\r\n        const sortedChord = [...chord].sort();\r\n        return Object.values(usedChords).some(usedChord => {\r\n            const sortedUsedChord = [...usedChord].sort();\r\n            return JSON.stringify(sortedUsedChord) === JSON.stringify(sortedChord);\r\n        });\r\n    }\r\n\r\n    function uploadedChord(chord) {\r\n        const sortedChord = [...chord].sort();\r\n\r\n        for (const [, chords] of uploadedChords.entries()) {\r\n            for (const uploadedChord of chords) {\r\n                const sortedUploadedChord = [...uploadedChord].sort();\r\n                if (JSON.stringify(sortedUploadedChord) === JSON.stringify(sortedChord)) {\r\n                    return true;\r\n                }\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    function mirrorKeys(chord) {\r\n        return chord.map(char => KEY_MIRROR_MAP_L[char] || KEY_MIRROR_MAP_R[char]).filter(Boolean);\r\n    }\r\n\r\n    function threeDKeys(chord) {\r\n        return chord.map(char => getThreeDKey(char)).filter(Boolean);\r\n    }\r\n\r\n    function getThreeDKey(char) {\r\n        for (const [finger, chars] of Object.entries(KEY_FINGER_MAP)) {\r\n            if (chars.includes(char)) return `${finger}_3D`;\r\n        }\r\n        return null;\r\n    }\r\n\r\n    function generate() {\r\n        loadUploadedChords();\r\n        const totalWords = wordsList().length;\r\n\r\n        let currentIteration = 0\r\n        let skippedWords = 0\r\n        const failedWords = [];\r\n\r\n        for (let index = 0; index < totalWords; index++) {\r\n            const word = wordsList()[index];\r\n            // Skip if the word is already in chordLibrary\r\n            if (uploadedChords.has(word)) {\r\n                //console.log(`Skipping '${word}' because it already in chordLibrary.`);\r\n                skippedWords++;\r\n                continue;\r\n            }\r\n\r\n            const chord = calculateChord(getChars(word));\r\n            if (chord) {\r\n                assignChord(word, chord.sort().reverse());\r\n            } else {\r\n                //console.log(\"Could not generate chord for\", word);\r\n                failedWords.push(word);\r\n            }\r\n\r\n            currentIteration++;\r\n\r\n            const progress = (currentIteration / totalWords) * 100;\r\n            postMessage({ type: 'progress', progress });\r\n        }\r\n        return {\r\n            usedChords: usedChords,\r\n            skippedWordCount: skippedWords,\r\n            failedWords: failedWords\r\n        };\r\n    }\r\n\r\n    let results = generate();\r\n    return results;\r\n}\r\n\r\n// eslint-disable-next-line no-restricted-globals\r\nself.onmessage = function (e) {\r\n    if (e.data.type === 'generateChords') {\r\n        postMessage({ type: 'progress', progress: 0 });  // Initial progress message\r\n        const result = generateChords(e.data.wordsArray, e.data.sliderValue, e.data.checkboxStates, e.data.chordLibrary);\r\n        postMessage({ type: 'result', result });  // Final result\r\n    }\r\n}\r\n"],"names":["_arrayLikeToArray","arr","len","length","i","arr2","Array","_unsupportedIterableToArray","o","minLen","n","Object","prototype","toString","call","slice","constructor","name","from","test","_createForOfIteratorHelper","allowArrayLike","it","Symbol","iterator","isArray","F","s","done","value","e","_e","f","TypeError","err","normalCompletion","didErr","step","next","_e2","_toConsumableArray","iter","_slicedToArray","r","l","t","u","a","push","generateChords","words","sliderValue","checkboxStates","chordLibrary","MIN_WORD_LENGTH","ALT_KEYS","KEY_MIRROR_MAP_L","KEY_MIRROR_MAP_R","fromEntries","entries","map","_ref","_ref2","key","KEY_FINGER_MAP","CONFLICTING_FINGER_GROUPS_DOUBLE","CONFLICTING_FINGER_GROUPS_TRIPLE","UNUSABLE_CHORDS","settings","useDupKey","useMirroredKeys","useAltKeys","use3dKeys","minChordLength","maxChordLength","usedChords","uploadedChords","Map","localWords","Set","word","toLowerCase","CHORD_GENERATORS_MAP","chars","_step","_iterator","allCombinations","chord","validChord","_step2","_iterator2","concat","char","filter","Boolean","mirrorKeys","_step4","_iterator4","_step3","_iterator3","_i2","_Object$entries","_Object$entries$_i","finger","includes","getThreeDKey","threeDKeys","SETTINGS_MAP","wordsList","calculateChord","_i","_Object$keys","keys","generatorKey","option","replace","sort","reverse","getChars","split","str","uniq_chars","validChars","values","flat","assignChord","sortedChord","size","hasDuplicates","some","fingerKeys","JSON","stringify","fingerConflict","usedChord","sortedUsedChord","_step6","_iterator6","_step7","_iterator7","sortedUploadedChord","uploadedChord","powerSetCache","cacheKey","join","_step5","result","_iterator5","subset","powerSet","b","Promise","resolve","reject","console","warn","forEach","entry","chordInput","chordOutput","trim","has","get","set","error","totalWords","currentIteration","skippedWords","failedWords","index","postMessage","type","progress","skippedWordCount","generate","self","onmessage","data","wordsArray"],"sourceRoot":""}